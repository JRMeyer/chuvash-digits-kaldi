#!/bin/bash

# Joshua Meyer (2017)


# USAGE:
#
#      ./run.sh <corpus_name>
#
# INPUT:
#
#    input_dir/
#       lexicon.txt
#       lexicon_nosil.txt
#       phones.txt
#       task.arpabo
#       transcripts
#
#       audio_dir/
#          utterance1.wav
#          utterance2.wav
#          utterance3.wav
#               .
#               .
#          utteranceN.wav
#
#    config_dir/
#       mfcc.conf
#       topo_orig.proto
#
#
# OUTPUT:
#
#    exp_dir
#    feat_dir
#    data_dir
# 


corpus_name=$1
run=$2

if [ "$#" -ne 2 ]; then
    echo "ERROR: $0"
    echo "USAGE: $0 <corpus_name> <run>"
    exit 1
fi


### STAGES
##
#
prep_audio_data=1
prep_data=1
extract_feats=1
train_gmm=1
compile_graph=1
decode_test=0
save_model=0
#
##
###


### HYPER-PARAMETERS
##
#
tot_gauss_mono=500
num_leaves_tri=500
tot_gauss_tri=1000
decode_beam=13
decode_lattice_beam=7
decode_max_active_states=700
num_iters_mono=10
num_iters_tri=10
#
##
###


### SHOULD ALREADY EXIST
##
#
num_processors=$(nproc)
unknown_word="<unk>"
unknown_phone="SPOKEN_NOISE"
silence_phone="SIL"
input_dir=input_${corpus_name}
audio_dir="${input_dir}/audio"
config_dir=config
cmd="utils/run.pl"
#
##
###


### GENERATED BY SCRIPT
##
#
data_dir=data_${corpus_name}
exp_dir=exp_${corpus_name}
plp_dir=plp_${corpus_name}
#
##
###



    # Given dir of WAV files, create dir for train, create 'wav.scp',
    # create 'text', create 'utt2spk' and 'spk2utt', and copy the language model
    # from elsewhere (ARPA format)

if [ "$prep_audio_data" -eq "1" ]; then

    local/prepare_audio_data.sh \
        $audio_dir \
        "`pwd`"/$input_dir/transcripts \
        $data_dir \
        train \
        || printf "\n####\n#### ERROR: prepare_data.sh \n####\n\n" \
        || exit 1;
fi


if [ "$prep_data" -eq "1" ]; then
    
    printf "\n####===========####\n";
    printf "#### DATA PREP ####\n";
    printf "####===========####\n\n";

    ./prep_data.sh $input_dir $data_dir
    
fi



if [ "$extract_feats" -eq "1" ]; then

    printf "\n####====================####\n";
    printf "#### FEATURE EXTRACTION ####\n";
    printf "####====================####\n\n";

    ./extract_feats.sh $data_dir/train $plp_dir 
    
fi



if [ "$train_gmm" -eq "1" ]; then

    printf "\n####===============####\n";
    printf "#### TRAINING GMMs ####\n";
    printf "####===============####\n\n";

    ./train_gmm.sh \
        $data_dir \
        $num_iters_mono \
        $tot_gauss_mono \
        $num_iters_tri \
        $tot_gauss_tri \
        $num_leaves_tri \
        $exp_dir;
fi



if [ "$compile_graph" -eq "1" ]; then
    
    printf "\n####===================####\n";
    printf "#### GRAPH COMPILATION ####\n";
    printf "####===================####\n\n";

    ./compile_graph.sh $data_dir $exp_dir
    
fi



if [ "$decode_test" -eq "1" ]; then
    
    printf "\n####================####\n";
    printf "#### BEGIN DECODING ####\n";
    printf "####================####\n\n";

    ./test_gmm.sh
fi

exit;


