#!/bin/bash

# Joshua Meyer (2017)


# USAGE:
#
#      ./run.sh <corpus_name>
#
# INPUT:
#
#    input_dir/
#       lexicon.txt
#       lexicon_nosil.txt
#       phones.txt
#       task.arpabo
#       transcripts
#
#       audio_dir/
#          utterance1.wav
#          utterance2.wav
#          utterance3.wav
#               .
#               .
#          utteranceN.wav
#
#    config_dir/
#       mfcc.conf
#       topo_orig.proto
#
#
# OUTPUT:
#
#    exp_dir
#    feat_dir
#    data_dir
# 


corpus_name=$1
run=$2

if [ "$#" -ne 2 ]; then
    echo "ERROR: $0"
    echo "USAGE: $0 <corpus_name> <run>"
    exit 1
fi


### STAGES
##
#
check_input=1
prep_data=1
extract_feats=1
train_monophones=1
train_triphones=1
adapt_models=0
compile_graph=1
decode_test=0
save_model=0
#
##
###


### HYPER-PARAMETERS
##
#
tot_gauss_mono=1000
num_leaves_tri=1000
tot_gauss_tri=2000
decode_beam=13
decode_lattice_beam=7
decode_max_active_states=700
num_iters_mono=40
num_iters_tri=40
#
##
###


### SHOULD ALREADY EXIST
##
#
num_processors=$(nproc)
unknown_word="<unk>"
unknown_phone="SPOKEN_NOISE"
silence_phone="SIL"
input_dir=input_${corpus_name}
audio_dir="${input_dir}/audio"
config_dir=config
cmd="utils/run.pl"
#
##
###


### GENERATED BY SCRIPT
##
#
data_dir=data_${corpus_name}
exp_dir=exp_${corpus_name}
plp_dir=plp_${corpus_name}
#
##
###




if [ "$check_input" -eq "1" ]; then
    
    printf "\n####=================####\n";
    printf "#### BEGIN CHECK INPUT ####\n";
    printf "####=================####\n\n";

    echo "$0: looking for audio data in $audio_dir"
    
    # Make sure we have the audio data (WAV file utterances)
    if [ ! -d $audio_dir ]; then
        printf '\n####\n#### ERROR: '"${audio_dir}"' not found \n####\n\n';
        exit 1;
    fi

    # sort input files by bytes (C-style) and re-save them with orginal filename
    for fileName in \
        lexicon.txt \
            lexicon_nosil.txt \
            phones.txt \
            transcripts; do
        LC_ALL=C sort -i ${input_dir}/${fileName} -o ${input_dir}/${fileName};
    done;
    
fi



if [ "$decode_test" -eq "1" ]; then
    
    printf "\n####================####\n";
    printf "#### BEGIN DECODING ####\n";
    printf "####================####\n\n";
    
    # DECODE WITH TRIPHONES WITH SAT ADJUSTED FEATURES
    
    # steps/decode_fmllr.sh --cmd "$cmd" \
    #     --nj $num_processors \
    #     ${exp_dir}/triphones_lda_mllt_sat/graph \
    #     ${data_dir}/${test_dir} \
    #     "${exp_dir}"'/triphones_lda_mllt_sat/decode_'"${test_dir}" \
    #     $unknown_phone \
    #     $silence_phone \
    #     || exit 1;

    
    # DECODE WITH REGULAR TRIPHONES WITH VANILLA DELTA FEATURES

    printf "\n ### Decoding with 4 jobs  ### "
    
    steps/decode.sh \
        --cmd "$cmd" \
        --nj 4 \
        --beam $decode_beam \
        --lattice-beam $decode_lattice_beam \
        --max-active $decode_max_active_states \
        ${exp_dir}/triphones/graph \
        ${data_dir}/${test_dir} \
        "${exp_dir}"'/triphones/decode_'"${test_dir}" \
        $unknown_phone \
        $silence_phone \
        || printf "\n####\n#### ERROR: decode.sh \n####\n\n" \
        || exit 1;
    

    printf "#### BEGIN CALCULATE WER ####\n";
    
    for x in ${exp_dir}/triphones/decode*; do
        [ -d $x ] && grep "WER" $x/wer_* | utils/best_wer.sh > WER_triphones_${corpus_name}_${run}.txt;
    done

    printf "\n####==============####\n";
    printf "#### END DECODING ####\n";
    printf "####==============####\n\n";

    echo "num_iters_mono=${num_iters_mono}" >> WER_triphones_${corpus_name}_${run}.txt
    echo "num_iters_tri=${num_iters_tri}" >> WER_triphones_${corpus_name}_${run}.txt
    echo "Language Model=" >> WER_triphones_${corpus_name}_${run}.txt
    head input_${corpus_name}/task.arpabo >> WER_triphones_${corpus_name}_${run}.txt
    
fi


exit;


